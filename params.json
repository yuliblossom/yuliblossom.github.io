{"name":"Molly's backyard","tagline":"For sharing","body":"### Welcome to Molly's GitHub Pages.\r\n* This is my first githubBlog, thanks for reading.\r\n\r\n### 代理\r\n* 代理设计模式的作用:\r\n    * 1.A对象监听B对象的一些行为，A成为B的代理\r\n    * 2.B对象想告诉A对象一些事情，A成为B的代理\r\n\r\n* 代理设计模式的总结：\r\n    * 如果你想监听别人的一些行为，那么你就要成为别人的代理\r\n    * 如果你想告诉别人一些事情，那么就让别人成为你的代理\r\n\r\n* 代理设计模式的开发步骤\r\n    * 1.拟一份协议（协议名字的格式：控件名 + Delegate），在协议里面声明一些代理方法（一般代理方法都是@optional）\r\n    * 2.声明一个代理属性：@property (nonatomic, weak) id<代理协议> delegate;\r\n    * 3.在内部发生某些行为时，调用代理对应的代理方法，通知代理内部发生什么事\r\n    * 4.设置代理：xxx.delegate = yyy;\r\n    * 5.yyy对象遵守协议，实现代理方法\r\n\r\n### 代理和通知的区别\r\n- 代理：1个对象只能告诉另1个对象发生了什么事\r\n- 通知：1个对象可以告诉N个对象发生了什么事\r\n\r\n### KVC\\KVO\r\n- KVC(Key Value Coding)常见作用：给模型属性赋值\r\n- KVO(Key Value Observing)常用作用：监听模型属性值的改变\r\n- KVO的使用步骤<br>\r\n\r\n```objc\r\n// cc监听了aa的name属性的改变\r\n[aa addObserver:cc forKeyPath:@\"name\" options: NSKeyValueObservingOptionOld context:nil];\r\n\r\n// cc得实现监听方法\r\n/**\r\n * 当监听到object的keyPath属性发生了改变\r\n */\r\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\r\n{\r\n    NSLog(@\"监听到%@对象的%@属性发生了改变， %@\", object, keyPath, change);\r\n}\r\n```","google":"delegate","note":"Don't delete this file! It's used internally to help with page regeneration."}